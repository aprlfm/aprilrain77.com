---
import Layout from '../layouts/Layout.astro';
import Container from '../components/Container.astro';
---

<Layout title="aprils site owowowowowowowowow">
  <main class="relative z-10 flex min-h-screen items-center justify-center p-4">
    <Container 
      size="w-full max-w-[700px] h-auto min-h-[700px] lg:h-[700px]" 
      borderColor="border-white/30" 
      borderWidth="border"
      backgroundColor="bg-[#262A38]/90"
    >
      <div class="block lg:hidden p-6 space-y-6">
        <div class="flex flex-col items-center">
          <div class="relative w-40 h-40 mb-4">
            <div id="profile-container-mobile" class="absolute inset-4 w-32 h-32 overflow-hidden bg-white/10 flex items-center justify-center z-10">
              <div id="profile-loading-mobile" class="text-white/50 text-sm font-mono">...</div>
              <img id="profile-pic-mobile" class="w-full h-full object-cover hidden" alt="April's profile picture" />
            </div>
            
            <svg id="star-border-mobile" class="absolute -inset-4 w-48 h-48 z-20 overflow-visible" viewBox="-16 -16 160 160" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <path id="border-star-mobile" d="M8 3l2 4h4l-3 3 1 4-4-2-4 2 1-4-3-3h4l2-4z" />
              </defs>
            </svg>
          </div>
          
          <div class="text-center">
            <h1 class="text-white font-mono text-xl mb-2">hi im april owo</h1>
            <p class="text-white/80 font-mono text-sm mb-1">20 ‚Ä¢ she/her üè≥Ô∏è‚Äç‚ößÔ∏è</p>
            <p class="text-white/70 font-mono text-sm">trans girl who codes and listens to music<br />i like programming, i like gamehacking, i like windows</p>
          </div>
        </div>

        <div class="border-t border-white/30"></div>

        <div>
          <h2 class="text-white/90 font-mono text-lg mb-3">bio</h2>
          <div class="text-white/70 font-mono text-sm space-y-2">
            <p>i love computer science/maths and working on various rust projects</p>
            <p>passionate about low-level programming, reverse engineering, and creating tools that make developers' lives easier</p>
            <p>when i'm not coding, you'll find me listening to music on last.fm or gaming</p>
            <p>always happy to chat about tech, music, or anything really! feel free to reach out ^^</p>
          </div>
        </div>
      </div>

      <div class="hidden lg:block relative h-full">
        <div class="absolute top-12 left-12 z-10">
          <div class="relative w-40 h-40">
            <div id="profile-container" class="absolute inset-4 w-32 h-32 overflow-hidden bg-white/10 flex items-center justify-center z-10">
              <div id="profile-loading" class="text-white/50 text-sm font-mono">...</div>
              <img id="profile-pic" class="w-full h-full object-cover hidden" alt="April's profile picture" />
            </div>
            
            <svg id="star-border" class="absolute -inset-4 w-48 h-48 z-20 overflow-visible" viewBox="-16 -16 160 160" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <path id="border-star" d="M8 3l2 4h4l-3 3 1 4-4-2-4 2 1-4-3-3h4l2-4z" />
              </defs>
            </svg>
          </div>
        </div>

        <div class="absolute top-16 left-72 right-12 z-10">
          <div class="text-left">
            <h1 class="text-white font-mono text-xl mb-2">hi im april owo</h1>
            <p class="text-white/80 font-mono text-sm mb-1">20 ‚Ä¢ she/her üè≥Ô∏è‚Äç‚ößÔ∏è</p>
            <p class="text-white/70 font-mono text-sm">trans girl who codes and listens to music<br />i like programming, i like gamehacking, i like windows</p>
            <div class="border-t border-white/30 my-4"></div>
            
            <div>
              <h2 class="text-white/90 font-mono text-lg mb-3">bio</h2>
              <div class="text-white/70 font-mono text-sm space-y-2">
                <p>i love computer science/maths and working on various rust projects</p>
                <p>passionate about low-level programming, reverse engineering, and creating tools that make developers' lives easier</p>
                <p>when i'm not coding, you'll find me listening to music on last.fm or gaming</p>
                <p>always happy to chat about tech, music, or anything really! feel free to reach out ^^</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </main>
</Layout>

<style>
  .star-border-element {
    animation: twinkle 3s ease-in-out infinite;
  }
  
  .star-border-element:nth-child(2n) {
    animation-delay: 0.5s;
  }
  
  .star-border-element:nth-child(3n) {
    animation-delay: 1s;
  }
  
  .star-border-element:nth-child(4n) {
    animation-delay: 1.5s;
  }
  
  .star-border-element:nth-child(5n) {
    animation-delay: 2s;
  }
  
  @keyframes twinkle {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 1; }
  }
</style>

<script>
  const starColorsArray = ["#DFE2F0", "#CEA3D6", "#97BAC7", "#A5C7AE", "#BECEB1", "#DDCCA3"];
  const svgNS = "http://www.w3.org/2000/svg";
  
  function getRandomNumber(min: number, max: number): number {
    return Math.random() * (max - min) + min;
  }
  
  function generateStarBorder(svgId: string): void {
    const starBorderSvg = document.getElementById(svgId);
    if (!starBorderSvg) return;
    
    const defs = starBorderSvg.querySelector('defs');
    const existingStars = starBorderSvg.querySelectorAll('use');
    existingStars.forEach(star => star.remove());
    
    const centerX = 64;
    const centerY = 64;
    const innerRadius = 45;
    const outerRadius = 75;
    const middleExclusionRadius = 40;
    
    interface StarConfig {
      x: number;
      y: number;
      rotation: number;
      color: string;
      opacity: number;
      scale: number;
    }
    
    const stars: StarConfig[] = [];
    const numberOfStars = 45;
    
    for (let i = 0; i < numberOfStars; i++) {
      const angle = (i / numberOfStars) * Math.PI * 2 + getRandomNumber(-0.3, 0.3);
      const distance = getRandomNumber(innerRadius, outerRadius);
      
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;
      
      const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
      if (distanceFromCenter < middleExclusionRadius) {
        continue;
      }
      
      stars.push({
        x, y,
        rotation: getRandomNumber(0, 360),
        color: starColorsArray[Math.floor(Math.random() * starColorsArray.length)],
        opacity: getRandomNumber(0.4, 0.9),
        scale: getRandomNumber(0.8, 1.8)
      });
    }
    
    for (let i = 0; i < 25; i++) {
      const angle = getRandomNumber(0, Math.PI * 2);
      const distance = getRandomNumber(innerRadius + 5, outerRadius);
      
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;
      
      const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
      if (distanceFromCenter < middleExclusionRadius) {
        continue;
      }
      
      stars.push({
        x, y,
        rotation: getRandomNumber(0, 360),
        color: starColorsArray[Math.floor(Math.random() * starColorsArray.length)],
        opacity: getRandomNumber(0.3, 0.8),
        scale: getRandomNumber(0.6, 1.4)
      });
    }
    
    for (let i = 0; i < 20; i++) {
      const angle = getRandomNumber(0, Math.PI * 2);
      const distance = getRandomNumber(outerRadius - 10, outerRadius + 8);
      
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;
      
      stars.push({
        x, y,
        rotation: getRandomNumber(0, 360),
        color: starColorsArray[Math.floor(Math.random() * starColorsArray.length)],
        opacity: getRandomNumber(0.3, 0.8),
        scale: getRandomNumber(0.6, 1.4)
      });
    }
    
    for (let i = 0; i < 15; i++) {
      const angle = getRandomNumber(0, Math.PI * 2);
      const distance = getRandomNumber(innerRadius + 10, outerRadius + 12);
      
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;
      
      const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
      if (distanceFromCenter < middleExclusionRadius) {
        continue;
      }
      
      stars.push({
        x, y,
        rotation: getRandomNumber(0, 360),
        color: starColorsArray[Math.floor(Math.random() * starColorsArray.length)],
        opacity: getRandomNumber(0.2, 0.7),
        scale: getRandomNumber(0.5, 1.6)
      });
    }
    
    for (let i = 0; i < 20; i++) {
      const angle = getRandomNumber(0, Math.PI * 2);
      const distance = getRandomNumber(innerRadius, outerRadius + 15);
      
      const x = centerX + Math.cos(angle) * distance;
      const y = centerY + Math.sin(angle) * distance;
      
      const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
      if (distanceFromCenter < middleExclusionRadius) {
        continue;
      }
      
      stars.push({
        x, y,
        rotation: getRandomNumber(0, 360),
        color: starColorsArray[Math.floor(Math.random() * starColorsArray.length)],
        opacity: getRandomNumber(0.2, 0.6),
        scale: getRandomNumber(0.4, 1.0)
      });
    }
    
    stars.forEach((star, index) => {
      const use = document.createElementNS(svgNS, 'use');
      const starRef = svgId === 'star-border-mobile' ? '#border-star-mobile' : '#border-star';
      use.setAttribute('href', starRef);
      use.setAttribute('class', 'star-border-element');
      use.setAttribute('fill', star.color);
      use.setAttribute('opacity', star.opacity.toString());
      use.setAttribute(
        'transform', 
        `translate(${star.x}, ${star.y}) scale(${star.scale}) rotate(${star.rotation}) translate(-8, -8)`
      );
      
      use.style.animationDelay = `${(index * 0.03) % 3}s`;
      
      starBorderSvg.appendChild(use);
    });
  }

  async function loadDiscordProfile() {
    try {
      const response = await fetch('https://api.lanyard.rest/v1/users/463566237918691338');
      const data = await response.json();
      
      if (data.success && data.data.discord_user.avatar) {
        const userId = data.data.discord_user.id;
        const avatarHash = data.data.discord_user.avatar;
        const avatarUrl = `https://cdn.discordapp.com/avatars/${userId}/${avatarHash}.png?size=256`;
        const profilePic = document.getElementById('profile-pic') as HTMLImageElement;
        const profileLoading = document.getElementById('profile-loading');
        
        if (profilePic && profileLoading) {
          profilePic.src = avatarUrl;
          profilePic.onload = () => {
            profileLoading.classList.add('hidden');
            profilePic.classList.remove('hidden');
          };
        }

        const profilePicMobile = document.getElementById('profile-pic-mobile') as HTMLImageElement;
        const profileLoadingMobile = document.getElementById('profile-loading-mobile');
        
        if (profilePicMobile && profileLoadingMobile) {
          profilePicMobile.src = avatarUrl;
          profilePicMobile.onload = () => {
            profileLoadingMobile.classList.add('hidden');
            profilePicMobile.classList.remove('hidden');
          };
        }
      }
    } catch (error) {
      console.error('Failed to load Discord profile:', error);
      const profileLoading = document.getElementById('profile-loading');
      const profileLoadingMobile = document.getElementById('profile-loading-mobile');
      
      if (profileLoading) profileLoading.textContent = ':(';
      if (profileLoadingMobile) profileLoadingMobile.textContent = ':(';
    }
  }

  function initializePage() {
    generateStarBorder('star-border');
    generateStarBorder('star-border-mobile');
    loadDiscordProfile();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePage);
  } else {
    initializePage();
  }
  
  let resizeTimeout: ReturnType<typeof setTimeout>;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      generateStarBorder('star-border');
      generateStarBorder('star-border-mobile');
    }, 300);
  });
</script>